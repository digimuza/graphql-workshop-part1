datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
    output   = "../src/@generated/typegraphql-prisma"
}

model Post {
    id        Int     @id @default(autoincrement())
    title     String
    content   String?
    published Boolean @default(false)
    author    User?   @relation(fields: [authorId], references: [id])
    authorId  String?
}

model User {
    id                         String                @id @default(uuid())
    email                      String                @unique
    fullName                   String?
    posts                      Post[]
    createdAt                  DateTime              @default(now())
    updatedAt                  DateTime              @updatedAt
    companies                  Company[]
    locations                  Location[]
    marketplaces               Marketplace[]
    drums                      Drum[]
    drumTypes                  DrumType[]
    drumStateHistoryUpdates    DrumStateHistory[]
    drumMovementHistoryUpdates DrumMovementHistory[]
    companyUser                CompanyUser[]
    drumBorder                 DrumBorder[]
}

model Company {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    name        String
    locationId  String?
    location    Location?     @relation(fields: [locationId], references: [id])
    marketplace Marketplace[]
}

model CompanyUser {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])
}

model Location {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    address   String
    latitude  Float
    longitude Float

    companies        Company[]
    drumStateHistory DrumStateHistory[]
}

model Marketplace {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    isCurrent Boolean?
    isLast    Boolean?

    companyId String?
    company   Company? @relation(fields: [companyId], references: [id])

    drumId String

    gracePeriodInDays         Int?
    minimumRentPeriodInMonths Int?
    reservationPeriodInDays   Int?
}

model Drum {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])


    drumTypeId String?
    drumType   DrumType?

    drumStateHistoryUpdates    DrumStateHistory[]
    drumMovementHistoryUpdates DrumMovementHistory[]
}

model DrumType {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    coreDiameter        Float
    coreWidth           Float
    drivingBoreDiameter Float?
    drivingBoreOffset   Float?
    emptyWeight         Float
    flangeDiameter      Float
    material            String?
    maximumLoadWeight   Float
    name                String
    overallWidth        Float
    drumId              String
    drum                Drum    @relation(fields: [drumId], references: [id])
}

model DrumStateHistory {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    ownerId    String?
    owner      User?    @relation(fields: [ownerId], references: [id])
    drumId     String
    drum       Drum     @relation(fields: [drumId], references: [id])
    state      String
    locationId String
    location   Location @relation(fields: [locationId], references: [id])
}

model DrumMovementHistory {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    drumId String
    drum   Drum   @relation(fields: [drumId], references: [id])

    latitude  Float
    longitude Float
}

model DrumBorder {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])

    @@index([createdAt, updatedAt])
}
